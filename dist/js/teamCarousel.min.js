"use strict";var teamContainer=document.querySelector(".team__cards"),teamCards=document.querySelectorAll(".team__card"),teamCardLeftArrow=document.querySelector(".team__btn-left"),teamCardRightArrow=document.querySelector(".team__btn-right"),carouselSpeed=3e3,counter=0,teamCardStyles=teamCards[0].currentStyle||window.getComputedStyle(teamCards[0]),startingWindowWidth=window.innerWidth,handleTeamCardCarousel=function(){var e=window.innerWidth;startingWindowWidth!=e?(resetTeamCardInterval(),startingWindowWidth=e):(counter++,changeTeamCard())},changeTeamCard=function(){var e=window.innerWidth,t=teamCards[0].clientWidth,a=parseInt(teamCardStyles.marginLeft)+parseInt(teamCardStyles.marginRight);e<768?counter<0?counter=teamCards.length-1:counter>teamCards.length-1&&(counter=0):e<992?counter<0?counter=teamCards.length-2:counter>teamCards.length-2&&(counter=0):counter<0?counter=teamCards.length-3:counter>teamCards.length-3&&(counter=0),teamContainer.style.transform="translateX(".concat((t+a)*-counter,"px)")},nextTeamCard=function(){counter++,resetTeamCardInterval()},previousTeamCard=function(){counter--,resetTeamCardInterval()},startTeamCardCarousel=setInterval(handleTeamCardCarousel,carouselSpeed),resetTeamCardInterval=function(){clearInterval(startTeamCardCarousel),changeTeamCard(),startTeamCardCarousel=setInterval(handleTeamCardCarousel,carouselSpeed)};teamCardLeftArrow.addEventListener("click",previousTeamCard),teamCardRightArrow.addEventListener("click",nextTeamCard),window.addEventListener("resize",changeTeamCard);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlYW1DYXJvdXNlbC5qcyJdLCJuYW1lcyI6WyJ0ZWFtQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwidGVhbUNhcmRzIiwicXVlcnlTZWxlY3RvckFsbCIsInRlYW1DYXJkUmlnaHRBcnJvdyIsImNhcm91c2VsU3BlZWQiLCJ0ZWFtQ2FyZFN0eWxlcyIsImN1cnJlbnRTdHlsZSIsIndpbmRvdyIsImdldENvbXB1dGVkU3R5bGUiLCJzdGFydGluZ1dpbmRvd1dpZHRoIiwiaW5uZXJXaWR0aCIsIndpbmRvd1dpZHRoIiwicmVzZXRUZWFtQ2FyZEludGVydmFsIiwiY2hhbmdlVGVhbUNhcmQiLCJ0ZWFtQ2FyZFdpZHRoIiwiY2xpZW50V2lkdGgiLCJ0ZWFtQ2FyZE1hcmdpbiIsInBhcnNlSW50IiwibWFyZ2luTGVmdCIsIm1hcmdpblJpZ2h0IiwiY291bnRlciIsImxlbmd0aCIsInN0eWxlIiwidHJhbnNmb3JtIiwic3RhcnRUZWFtQ2FyZENhcm91c2VsIiwic2V0SW50ZXJ2YWwiLCJoYW5kbGVUZWFtQ2FyZENhcm91c2VsIiwiY2xlYXJJbnRlcnZhbCIsInRlYW1DYXJkTGVmdEFycm93IiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXZpb3VzVGVhbUNhcmQiLCJuZXh0VGVhbUNhcmQiXSwibWFwcGluZ3MiOiJhQUFBLElBQU1BLGNBQWdCQyxTQUFTQyxjQUFjLGdCQUN2Q0MsVUFBWUYsU0FBU0csaUJBQWlCLGVBRHRDSixrQkFBZ0JDLFNBQVNDLGNBQWMsbUJBQ3ZDQyxtQkFBcUJDLFNBQUFBLGNBQWlCLG9CQUV0Q0MsY0FBa0IsSUFFbEJDLFFBQUFBLEVBR0ZDLGVBQWlCSixVQUFVLEdBQUdLLGNBQWdCQyxPQUFPQyxpQkFBaUJQLFVBQVUsSUFDaEZRLG9CQUFzQkYsT0FBT0csV0FNekJDLHVCQUFxQkQsV0FDekIsSUFBR0QsRUFBQUEsT0FBdUJFLFdBQ3RCQyxxQkFBcUJELEdBQ3JCRix3QkFGSkEsb0JBR0tFLElBRURFLFVBQ0hBLG1CQVFDQSxlQUFpQixXQUVuQixJQUFJQyxFQUFnQmIsT0FBQUEsV0FBaEJhLEVBQWdCYixVQUFVLEdBQUdjLFlBQzdCQyxFQUFpQkMsU0FBU1osZUFBZWEsWUFBY0QsU0FBU1osZUFBZWMsYUFFaEZSLEVBQWMsSUFDVlMsUUFBWSxFQUNYQSxRQUFVbkIsVUFBQW9CLE9BQVYsRUFDS0QsUUFBVW5CLFVBQVVvQixPQUF2QixJQUNGRCxRQUFBLEdBRUNULEVBQWMsSUFDaEJTLFFBQVksRUFDWEEsUUFBVW5CLFVBQUFvQixPQUFWLEVBQ0tELFFBQVVuQixVQUFVb0IsT0FBdkIsSUFDRkQsUUFBQSxHQUdEQSxRQUFZLEVBQ1hBLFFBQVVuQixVQUFBb0IsT0FBVixFQUNLRCxRQUFVbkIsVUFBVW9CLE9BQXZCLElBQ0ZELFFBQUEsR0FJUnRCLGNBQWN3QixNQUFNQyxVQUFwQnpCLGNBQUFBLFFBQUFnQixFQUErQ0EsSUFBRE0sUUFBOUN0QixRQU9Bc0IsYUFBTyxXQUNQUixVQUZKQSx5QkFNSVEsaUJBQU8sV0FDUFIsVUFGSkEseUJBS0lZLHNCQUF3QkMsWUFBWUMsdUJBQXVCdEIsZUFHM0R1QixzQkFBY0gsV0FDZFgsY0FBY1csdUJBQ2RBLGlCQUhKQSxzQkFBQUMsWUFBQUMsdUJBQUF0QixnQkFTQXdCLGtCQUFrQkMsaUJBQWlCLFFBQVNDLGtCQUM1QzNCLG1CQUFtQjBCLGlCQUFpQixRQUFTRSxjQUM3Q3hCLE9BQU9zQixpQkFBaUIsU0FBVWhCIiwiZmlsZSI6InRlYW1DYXJvdXNlbC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB0ZWFtQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlYW1fX2NhcmRzJyk7XHJcbmNvbnN0IHRlYW1DYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZWFtX19jYXJkJyk7XHJcbmNvbnN0IHRlYW1DYXJkTGVmdEFycm93ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRlYW1fX2J0bi1sZWZ0Jyk7XHJcbmNvbnN0IHRlYW1DYXJkUmlnaHRBcnJvdyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZWFtX19idG4tcmlnaHQnKTtcclxuXHJcbmNvbnN0IGNhcm91c2VsU3BlZWQgPSAzMDAwO1xyXG5sZXQgY291bnRlciA9IDA7XHJcblxyXG5sZXQgdGVhbUNhcmRTdHlsZXMgPSB0ZWFtQ2FyZHNbMF0uY3VycmVudFN0eWxlIHx8IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRlYW1DYXJkc1swXSk7IFxyXG5sZXQgc3RhcnRpbmdXaW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG5cclxuXHJcblxyXG5jb25zdCBoYW5kbGVUZWFtQ2FyZENhcm91c2VsID0gKCkgPT4ge1xyXG4gICAgLy9Qcnplcnl3YW15IHNsaWRlciB3IG1vbWVuY2llIGdkeSB6bWllbmlhbXkgc3plcm9rb8WbxIcgcHJ6ZWdsxIVkYXJraVxyXG4gICAgbGV0IHdpbmRvd1dpZHRoID0gd2luZG93LmlubmVyV2lkdGg7IC8vc3plcm9rb8WbYyBva25hIHN0cm9ueVxyXG4gICAgaWYoc3RhcnRpbmdXaW5kb3dXaWR0aCAhPSB3aW5kb3dXaWR0aCl7XHJcbiAgICAgICAgcmVzZXRUZWFtQ2FyZEludGVydmFsKCk7XHJcbiAgICAgICAgc3RhcnRpbmdXaW5kb3dXaWR0aCA9IHdpbmRvd1dpZHRoO1xyXG4gICAgfWVsc2V7XHJcbiAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgIGNoYW5nZVRlYW1DYXJkKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIGNvbnN0IGhhbmRsZVRlYW1DYXJkQ2Fyb3VzZWwgPSAoKSA9PiB7XHJcbi8vICAgICBjb3VudGVyKys7XHJcbi8vICAgICBjaGFuZ2VUZWFtQ2FyZCgpO1xyXG4vLyB9XHJcblxyXG5jb25zdCBjaGFuZ2VUZWFtQ2FyZCA9ICgpID0+IHtcclxuICAgIGxldCB3aW5kb3dXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoOyAvL3N6ZXJva2/Fm2Mgb2tuYSBzdHJvbnlcclxuICAgIGxldCB0ZWFtQ2FyZFdpZHRoID0gdGVhbUNhcmRzWzBdLmNsaWVudFdpZHRoOyAvL3N6ZXJva29zYyBqZWRuZWdvIGVsZW1lbnR1XHJcbiAgICBsZXQgdGVhbUNhcmRNYXJnaW4gPSBwYXJzZUludCh0ZWFtQ2FyZFN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlSW50KHRlYW1DYXJkU3R5bGVzLm1hcmdpblJpZ2h0KTsgLy9zdW1hIGxld2VnbyBpIHByYXdlZ28gbWFyZ2luZXN1XHJcblxyXG4gICAgaWYod2luZG93V2lkdGggPCA3Njgpe1xyXG4gICAgICAgIGlmKGNvdW50ZXIgPCAwKXtcclxuICAgICAgICAgICAgY291bnRlciA9IHRlYW1DYXJkcy5sZW5ndGggLSAxO1xyXG4gICAgICAgIH1lbHNlIGlmKGNvdW50ZXIgPiB0ZWFtQ2FyZHMubGVuZ3RoIC0xKXtcclxuICAgICAgICAgICAgY291bnRlciA9IDA7XHJcbiAgICAgICAgfSBcclxuICAgIH1lbHNlIGlmKHdpbmRvd1dpZHRoIDwgOTkyKXtcclxuICAgICAgICBpZihjb3VudGVyIDwgMCl7XHJcbiAgICAgICAgICAgIGNvdW50ZXIgPSB0ZWFtQ2FyZHMubGVuZ3RoIC0gMjtcclxuICAgICAgICB9ZWxzZSBpZihjb3VudGVyID4gdGVhbUNhcmRzLmxlbmd0aCAtIDIpe1xyXG4gICAgICAgICAgICBjb3VudGVyID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9ZWxzZXtcclxuICAgICAgICBpZihjb3VudGVyIDwgMCl7XHJcbiAgICAgICAgICAgIGNvdW50ZXIgPSB0ZWFtQ2FyZHMubGVuZ3RoIC0gMztcclxuICAgICAgICB9ZWxzZSBpZihjb3VudGVyID4gdGVhbUNhcmRzLmxlbmd0aCAtIDMpe1xyXG4gICAgICAgICAgICBjb3VudGVyID0gMDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGVhbUNvbnRhaW5lci5zdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWCgkeyh0ZWFtQ2FyZFdpZHRoICsgdGVhbUNhcmRNYXJnaW4pICogKC1jb3VudGVyKX1weClgXHJcbiAgICAvLyB0ZWFtQ2FyZHMuZm9yRWFjaChjYXJkID0+IHtcclxuICAgIC8vICAgICBjYXJkLnN0eWxlLmxlZnQgPSBgJHsodGVhbUNhcmRXaWR0aCArIHRlYW1DYXJkTWFyZ2luKSAqICgtY291bnRlcil9cHhgO1xyXG4gICAgLy8gfSk7XHJcbn1cclxuXHJcbmNvbnN0IG5leHRUZWFtQ2FyZCA9ICgpID0+IHtcclxuICAgIGNvdW50ZXIrKztcclxuICAgIHJlc2V0VGVhbUNhcmRJbnRlcnZhbCgpO1xyXG59XHJcblxyXG5jb25zdCBwcmV2aW91c1RlYW1DYXJkID0gKCkgPT4ge1xyXG4gICAgY291bnRlci0tO1xyXG4gICAgcmVzZXRUZWFtQ2FyZEludGVydmFsKCk7XHJcbn1cclxuXHJcbmxldCBzdGFydFRlYW1DYXJkQ2Fyb3VzZWwgPSBzZXRJbnRlcnZhbChoYW5kbGVUZWFtQ2FyZENhcm91c2VsLGNhcm91c2VsU3BlZWQpO1xyXG5cclxuY29uc3QgcmVzZXRUZWFtQ2FyZEludGVydmFsID0gKCkgPT4ge1xyXG4gICAgY2xlYXJJbnRlcnZhbChzdGFydFRlYW1DYXJkQ2Fyb3VzZWwpO1xyXG4gICAgY2hhbmdlVGVhbUNhcmQoKTtcclxuICAgIHN0YXJ0VGVhbUNhcmRDYXJvdXNlbCA9IHNldEludGVydmFsKGhhbmRsZVRlYW1DYXJkQ2Fyb3VzZWwsY2Fyb3VzZWxTcGVlZCk7XHJcbn1cclxuXHJcblxyXG5cclxuXHJcbnRlYW1DYXJkTGVmdEFycm93LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcHJldmlvdXNUZWFtQ2FyZCk7XHJcbnRlYW1DYXJkUmlnaHRBcnJvdy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG5leHRUZWFtQ2FyZCk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBjaGFuZ2VUZWFtQ2FyZCk7Il19
